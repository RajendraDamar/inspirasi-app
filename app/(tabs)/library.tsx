import React, { useState } from 'react';
import { View, StyleSheet, FlatList } from 'react-native';
// react-native-paper exports can differ between versions; require and guard access like other files in the repo
// eslint-disable-next-line @typescript-eslint/no-var-requires
const rnp = require('react-native-paper');
const Card: any = rnp.Card || rnp.default?.Card || ((props: any) => props.children ?? null);
const Button: any = rnp.Button || rnp.default?.Button || ((props: any) => null);
const Title: any = rnp.Title || rnp.default?.Title || ((props: any) => null);
const Paragraph: any = rnp.Paragraph || rnp.default?.Paragraph || ((props: any) => null);
const IconButton: any = rnp.IconButton || rnp.default?.IconButton || ((props: any) => null);
const useTheme: any = rnp.useTheme || rnp.default?.useTheme || (() => ({ colors: { background: '#fff' } }));
const Divider: any = rnp.Divider || rnp.default?.Divider || ((props: any) => null);
const CardContent: any = (Card as any).Content || ((props: any) => props.children ?? null);
const CardActions: any = (Card as any).Actions || ((props: any) => props.children ?? null);
import { useSavedLocations } from '../../src/hooks/useSavedLocations';


type SavedLocation = {
  id: string;
  name: string;
  code?: string;
};

const DEMO_LOCATIONS: SavedLocation[] = [
  { id: '1', name: 'Jakarta Pusat', code: '31.71.03.1001' },
  { id: '2', name: 'Bali Selatan', code: '51.72.05.2001' },
];

export default function LibraryTab() {
  const theme = useTheme();

  const { data, isLoading, add, remove, toggleFavorite } = useSavedLocations();
  const [newName, setNewName] = useState('');

  const renderItem = ({ item }: { item: any }) => (
    <Card style={styles.card} mode="outlined">
      <CardContent>
        <Title>{item.name}</Title>
        <Paragraph>Code: {item.code}</Paragraph>
      </CardContent>
      <CardActions>
        <Button mode="contained" onPress={() => { /* view */ }}>View</Button>
        <Button onPress={() => { if (item.id) remove.mutate(item.id); }}>Remove</Button>
        <IconButton icon={item.favorite ? 'star' : 'star-outline'} onPress={() => { if (item.id) toggleFavorite.mutate({ id: item.id, favorite: !item.favorite }); }} />
      </CardActions>
    </Card>
  );

  return (
    <View style={[styles.container, { backgroundColor: (theme as any).colors?.background || '#fff' }]}>
      <Title style={styles.title}>Saved Locations</Title>

      <View style={{ marginBottom: 8 }}>
        <Button mode="contained" onPress={async () => { await add.mutateAsync({ name: 'New Location ' + Date.now(), code: '' }); }}>Add demo location</Button>
      </View>

      <FlatList
        data={data || []}
        keyExtractor={(i: any) => i.id}
        contentContainerStyle={styles.list}
        renderItem={renderItem}
        ItemSeparatorComponent={() => <Divider />}
        ListEmptyComponent={() => isLoading ? <Paragraph>Loading...</Paragraph> : <Paragraph>No saved locations</Paragraph>}
      />

      <Title style={[styles.title, { marginTop: 16 }]}>Alerts History</Title>
      <Card style={styles.card} mode="elevated">
        <CardContent>
          <Paragraph>No alerts yet. Alerts generated by the Early Warning System will appear here.</Paragraph>
        </CardContent>
      </Card>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  title: {
    marginVertical: 8,
    fontSize: 18,
  },
  list: {
    paddingBottom: 16,
  },
  card: {
    marginVertical: 8,
  },
});
